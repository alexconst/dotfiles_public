###############################################################
# reminder
###############################################################
# prefix R              reload config
# prefix I              fetch plugins and source them
# prefix ?              see current default shortcuts (any other ones overruled by these settings won't show up)




###############################################################
# sensible defaults
###############################################################

# utf
set-option -gq utf8
set-option -gq status-utf8 on
set-window-option -gq utf8 on

# colour mode
set-option -g default-terminal "tmux-256color"
#set-option -g default-terminal "tmux-direct" # 24-bit 16M colours # NOTE: this doesn't seem to be required, tmux-256color already supported 16M colors; but for setting it for vim sake
#set-option -gas terminal-overrides ",*:Tc" # enable RGB colour # NOTE: it seems it's no longer required

# set small history limit to avoid sluggish refresh (TBC)
#set -g history-limit 5000

# forward tmux window title to X window
set-option -g set-titles on
set-option -g set-titles-string "[#S | #I] #W : #T"

# enable capture on start and restore on exit window data when running an application
set-window-option -g alternate-screen on

# on activity set set the window active flag but disable any messages or dings
set-option -g monitor-activity on
set-option -g activity-action none

# set default shell used by tmux
#set -g default-shell /usr/bin/zsh
#set -g default-command "reattach-to-user-namespace -l zsh"

# fix bindings for tmux-resurrect (not required anymore? especially with tmux-continuum?)
#bind C-s run-shell ~/.tmux/plugins/tmux-resurrect/scripts/save.sh
#bind C-r run-shell ~/.tmux/plugins/tmux-resurrect/scripts/restore.sh




###############################################################
# status bar (TBC)
###############################################################

# set tab color of active window
set-window-option -g window-status-current-style bg=brightred

# toggleable status bar via F1 key
my_status_style="bg=green,fg=black"
set-option -g status-style $my_status_style
bind -T root F1 if-shell "tmux show -g | grep -q 'status-style $my_status_style'" {
    set-option -g status-style default
    # could have an alternative super duper status bar here (TBC)
} {
    set-option -g status-style $my_status_style
}




###############################################################
# windows & panes
###############################################################

# setup " and = for window splitting
bind \" split-window -h
bind = split-window -v
bind % choose-buffer # by default is = so we bind a new key for it (% was for vertical split)

# renumber windows/tabs to match keyboard physical ordering
set-option -g base-index 1
set-window-option -g pane-base-index 1
set-window-option -g renumber-windows on

# `prefix c` creates window "c"lose to current one; `prefix a` "a"ppends at the end; both open on current path
bind c new-window -a -c "#{pane_current_path}"
bind a new-window -c "#{pane_current_path}"
# move window to left and right with `prefix <` and `prefix >`
bind < swap-window -t -1 \; select-window -t -1
bind > swap-window -t +1 \; select-window -t +1
# first and last window
bind ` select-window -t ":^"
bind - select-window -t ":$"
# cycle through windows quickly, without having to repeat the prefix combo (-n binds it to the root window, no need for prefix)
bind -n -r C-M-p previous-window
bind -n -r C-M-n next-window
# even lazier shortcuts (ctrl+{} doesn't work so we use alt+{})
bind -n "M-{" previous-window
bind -n "M-}" next-window
bind -n "M-`" select-window -t ":^"
bind -n "M-1" select-window -t ":1"
bind -n "M-2" select-window -t ":2"
bind -n "M-3" select-window -t ":3"
bind -n "M-4" select-window -t ":4"
bind -n "M-5" select-window -t ":5"
bind -n "M-6" select-window -t ":6"
bind -n "M-7" select-window -t ":7"
bind -n "M-8" select-window -t ":8"
bind -n "M-9" select-window -t ":9"
bind -n "M-0" select-window -t ":10"
bind -n "M--" select-window -t ":$"

# c"y"cle through panes
bind -n -r C-M-y select-pane -t :.+
#bind -n -r C-M-o rotate-window # rotate panes




###############################################################
# mouse and keyboard
###############################################################

# vi mode, https://sanctum.geek.nz/arabesque/vi-mode-in-tmux/
set-window-option -g mode-keys vi
set-option -g status-keys vi

# enable mouse scroll in tmux buffer, https://superuser.com/questions/209437/how-do-i-scroll-in-tmux/510310#510310
set-option -g mouse on
# but since the above only tends to work sometimes, and also causes the annoying "scroll down on copy", better to disable it :)
#set -g mouse off

# enable copy on mouse select
# bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "xclip -in -selection clipboard"          (tmux < 2.6)
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe "xclip -in -selection clipboard"
# to stay in copy-mode (ie, do not scroll down to the bottom after copying text) after yanking, see https://github.com/tmux/tmux/issues/402
# note that this can easily be done with `copy-selection` by adding `-x`. It just happens it's a lot more complicated for `copy-pipe`

# enable copy with vi visual mode
# press `prefix P` to paste
bind P paste-buffer
#bind -t vi-copy 'v' begin-selection
#bind -t vi-copy 'y' copy-pipe 'xclip -in -selection clipboard'
#bind -t vi-copy 'r' rectangle-toggle
bind -Tcopy-mode-vi v send -X begin-selection
bind -Tcopy-mode-vi V send -X select-line
bind -Tcopy-mode-vi y send -X copy-pipe 'xclip -in -selection clipboard'
bind -Tcopy-mode-vi r send -X rectangle-toggle

# don't make me think
bind -T root F2 command-prompt -p "(rename)" 'rename-window "%%"'
bind -T root F3  {
  copy-mode
  command-prompt -i -p "(search up)" "send-keys -X search-backward-incremental '%%%'"
}




###############################################################
# plugins
###############################################################

# List of plugins to load
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-powerline'
set -g @plugin 'tmux-plugins/tmux-mem-cpu-load'

# plugin options
#set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-save-shell-history 'on'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'



