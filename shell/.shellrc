# vi: ft=sh

# minimalistic shell environment setup with no dependencies for bash and zsh

# TODO: (this script is past its purpose so maybe it's time to) split it into two files


function __set_bash_history {
    shopt -s histappend                 # append instead of overwrite history
    shopt -s cmdhist                    # properly save multi-line commands
    shopt -s lithist                    # don't replace newlines with semicolons in history
    shopt -s cdspell                    # fix typos when changing directories
    export HISTFILESIZE=10000           # write more history
    export HISTSIZE=10000               # remember more history
    export HISTCONTROL=ignoreboth       # ignore commands beginning with a space and duplicates
    export HISTIGNORE='ls:bg:fg:exit:clear'   # ignore lame commands
    export PROMPT_COMMAND='history -a'  # store history immediately
}

function __set_zsh_history {
    HISTFILE=~/.zhistfile
    HISTSIZE=10000000
    SAVEHIST=10000000
    setopt appendhistory
    setopt incappendhistory             # history will be saved after every command you run (good for when power failures happen)
    setopt histignorealldups            # ignore duplicates
    setopt histignorespace              # ignore commands that have a leading space
}

function __set_shell_common {
    stty -ixon                          # unbind software flow control shortcuts (ctrl+s and ctrl+q) in terminal, so they can be used for other purposes
}

function __set_bash_config {
    bind 'TAB':menu-complete                    # use Tab to cycle through multiple matches for completion
    bind '"\e[Z": menu-complete-backward'       # use shift-Tab to cycle backwards
    bind "set menu-complete-display-prefix on"  # perform partial completion on the first Tab press, only start cycling full results on the second Tab press
    bind "set show-all-if-ambiguous on"         # display a list of the matching files (annoying because it creates a new lines, making it look like a command was entered)
    #bind "set completion-display-width 1"       # display one column with matches
}

_force_rehash() {
    (( CURRENT == 1 )) && rehash
    return 1  # Because we didn't really complete anything
}

function __set_zsh_config {
    # key input mode
    bindkey -v # vi mode
    #bindkey -e # emacs mode
    # misc
    TIMEFMT=$'%J\n%U user \n%S system \n%P cpu %*E total'   # zsh time builtin results format
    setopt interactivecomments                  # ignore lines starting with # when using an interactive shell
    setopt globdots                             # completion for hidden files (also forces completion for the . and .. folders)
    # completion
    autoload -Uz compinit                       # completion support
    compinit                                    # completion support
    autoload bashcompinit                       # completion support with bash compatibility
    bashcompinit                                # completion support with bash compatibility
    zmodload zsh/complist                       # (without this bindkey -M menuselect will fail)
    zstyle ':completion:*' completer _oldlist _expand _force_rehash _complete _files    # completion settings
    #zstyle ':completion:*' special-dirs true    # add completion for . and .. dirs when using globdots
    zstyle -e ':completion:*' special-dirs '[[ $PREFIX = (../)#(|.|..) ]] && reply=(..)' # this disables completion for . when using globdots, but keeps ..
    zstyle ':completion:*' menu select
    fpath=(/usr/local/share/zsh-completions $fpath) # set zsh function search path

    bindkey -M menuselect '^[[Z' reverse-menu-complete      # cycle completions backwards
    # bindings / shortcuts                                  # TODO: move this and create proper full set of vi bindings
    bindkey '^[[Z' backward-kill-word                       # delete previous word using shift+tab (very convenient when dealing with completions)
    # these were required after starting to use uxterm and urxvt
    bindkey "^A" beginning-of-line
    bindkey "^E" end-of-line
    bindkey "^[b" backward-word
    bindkey "^[f" forward-word
    bindkey "^K" kill-line
    bindkey "^P" history-search-backward
    bindkey "^N" history-search-forward
    bindkey "^R" history-incremental-search-backward
    bindkey "^S" history-incremental-search-forward

    # TO DELETE:
#    zstyle ':completion:*' auto-description 'specify: %d'
#    zstyle ':completion:*' completer _expand _complete _correct _approximate
#    zstyle ':completion:*' format 'Completing %d'
#    zstyle ':completion:*' group-name ''
#    zstyle ':completion:*' menu select=2
#    eval "$(dircolors -b)"
#    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
#    zstyle ':completion:*' list-colors ''
#    zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
#    zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
#    zstyle ':completion:*' menu select=long
#    zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
#    zstyle ':completion:*' use-compctl false
#    zstyle ':completion:*' verbose true
#    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
#    zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
}

function __set_zsh_colors {
    local zshf="/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
    if [[ -e "$zshf" ]]; then
        source "$zshf"
    fi
    local zshf="/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting_colorscheme-dracula.zsh"
    if [[ -e "$zshf" ]]; then
        source "$zshf"
    fi
    export ZSH_HIGHLIGHT_HIGHLIGHTERS=( main ) # disable cursor annoying highlighter
}

function _set_shell {
    __set_shell_common
    if [ -n "$BASH_VERSION" ]; then
        __set_bash_history
        __set_bash_config
    elif [ -n "$ZSH_VERSION" ]; then
        __set_zsh_history
        __set_zsh_config
        __set_zsh_colors
    fi
}

function _set_term_colors {
    # termcap modes: md: bold, mb: blink, me: end; us: underline, ue: end; so: standout, se: end
    # sequence codes: `\e[38;5??` sets 256/24-bit color; `\e[4;21;...` enables underline mode
    # color table: https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797
    # sequence codes: https://man7.org/linux/man-pages/man4/console_codes.4.html
    # strangely enough using tput wouldn't work here, but using escaped color sequences did
    export LESS_TERMCAP_md=$(printf "\e[38;5;46m")
    export LESS_TERMCAP_mb=$(printf "\e[38;5;196m")
    export LESS_TERMCAP_me=$(printf "\e[0m")
    export LESS_TERMCAP_us=$(printf "\e[4;21;38;5;195m")
    export LESS_TERMCAP_ue=$(printf "\e[0m")
    export LESS_TERMCAP_so=$(printf "\e[30;43m")
    export LESS_TERMCAP_se=$(printf "\e[0m")
}

function _set_misc_options {
    export MANPAGER='less -M -i -g -R'
    export LESS='-Mig'
    export PAGER=less
    export EDITOR=vim
    export VISUAL=vim
}

function _set_prompt {
    local fg_red='\e[1;38;5;160m'
    local fg_brown='\e[1;38;5;136m'
    local fg_blue='\e[1;38;5;27m'
    local fg_reset='\e[0m'
    local prompt_salt="${prompt_salt:-saltbae}"
    local fg_user=""
    local fg_hostname="\e[1;32;38;5;$((0x$((echo $prompt_salt; hostname) | sha256sum | cut -f1 -d' ' | tr -d '\n' | tail -c2)))m"
    if (( $EUID == 0 )); then
        shell_prompt="#"
        fg_user="$fg_red"
    else
        shell_prompt="$"
        fg_user="$fg_blue"
    fi
    if [ -n "$BASH_VERSION" ]; then
        # colors need to be enclosed in brackets like \[$color\] to ensure prompt won't break on line wraps and such
        PS1="\[${fg_reset}\]\[${fg_user}\]\u\[${fg_brown}\]@\[${fg_hostname}\]\h\[${fg_brown}\]${shell_prompt}\[${fg_reset}\] "
    elif [ -n "$ZSH_VERSION" ]; then
        PS1="$(print ""%{$fg_reset%}%{$fg_user%}%n%{$fg_brown%}@%{$fg_hostname%}%M%{$fg_brown%}${shell_prompt}%{$fg_reset%} "")"
    fi
    export PS1
}




# function to temporarily disable history
alias incognito_aux="function zshaddhistory() {  return 1 }"
function incognito(){
    if [ -n "$BASH_VERSION" ]; then
        HISTCONTROL="ignorespace"
        set +o history
    elif [ -n "$ZSH_VERSION" ]; then
        setopt HIST_IGNORE_SPACE
        setopt histignorespace
        setopt hist_ignore_space
        #incognito_aux # weirdly enough this still gets called when starting bash (at least from a zsh) so disabling it for now; it shouldn't make a difference
    fi
    unset HISTFILE
}


# set PATH
export PATH=$PATH:$HOME/data/home/bin:/opt/bin

# alias (not easily sourced from functions)
alias grep='grep --color=auto'
alias grepa='grep --color=always'
alias ls='ls --color=auto'
## most convenient and sensible
alias l='ls -la --color=always --group-directories-first --time-style=long-iso'
## natural sort of numbers (including versioning)
alias lln='ls -la --color=always --group-directories-first --time-style=long-iso -v'
## reverse time (most recent at bottom)
alias llr='ls -la --color=always --group-directories-first --time-style=long-iso -t -r'
## full time (microsecond)
alias llf='ls -la --color=always --group-directories-first --full-time'


if [[ -f $HOME/dotfiles_private/shell/.shellrc.local ]]; then
    source $HOME/dotfiles_private/shell/.shellrc.local
fi


# main
_set_shell
_set_term_colors
_set_misc_options
_set_prompt

